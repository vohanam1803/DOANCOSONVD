@using AMNHAC.Models
@model dynamic
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@using Microsoft.AspNet.Identity
<form action="/Home/Post" method="post">
    <button type="submit" style="background-color:red;color:black;">Vô Quyền Admin</button>
</form>
<link href="~/Content/css/content.css" rel="stylesheet" />
<div class="information">
    @foreach (AspNetUser user in Model.user)
    {
        <div class="profile">
            <div class="picture">
                <img src="@user.Avatar" alt="">
            </div>
            <div class="info">
                @using Microsoft.AspNet.Identity
                <h1 class="name mt-8">@user.Name</h1>
                <div class="member_type">
                    <i class="fa fa-users mt-8"> Free member </i>
                    <div class="private_profile">
                        <i class="fa fa-eye-slash mt-8"> Private Profile</i>
                        <form action="/MyMusicProfile/ThayAvatar" method="post">
                            <button type="submit" style="background-color:red;color:black;" class="change_profile mt-8">
                                Change Avatar
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        <div class="introduce">
            <div class="intro">“Roses are red, violets are blue. You may not know it, but someone loves you.”</div>
        </div>

    }
</div>
<div class="taskbar mg-16 pd-12">
    <ul class="task">
        <li class="task_logo"><a href="/MyMusicProfile/Index"><i class="fa fa-list"></i><br>Playlist</a></li>
        <li class="task_logo"><a href="#"><i class="fa fa-pencil"></i><br>Edit</a></li>
        <li class="task_logo"><a href="#"><i class="fa fa-upload"></i><br>Upload</a></li>
        <li class="task_logo"><a href="#"><i class="fa fa-certificate"></i><br>Badges</a></li>
        <li class="task_logo"><a href="#"><i class="fa fa-book"></i><br>History</a></li>
        <li class="task_logo"><a href="#"><i class="fa fa-envelope"></i><br>Notification</a></li>
    </ul>
</div>


<h3 style="text-align:center;color:red;"> @ViewBag.Message </h3>


<div class="playlist">

    @*Render*@


</div>











<div class="music-taskbar none">

    <div class="body-music">
        <div class="music-img">
            <img src="" alt="">
        </div>
        <div class="music-title">
            <marquee class="title"></marquee>
            <p class="author"></p>
        </div>

    </div>

    <div class="control-main">
        <div class="controls">

            <ion-icon name="shuffle-outline" class="play-shuffle md hydrated" role="img" aria-label="shuffle outline">
            </ion-icon>

            <ion-icon name="play-back" class="play-back md hydrated" role="img" aria-label="play back"></ion-icon>

            <div class="play">
                <div class="player-inner">
                    <ion-icon name="play" class="play-icon" id="icon"></ion-icon>
                </div>
            </div>

            <ion-icon name="play-forward" class="play-forward md hydrated" role="img" aria-label="play forward">
            </ion-icon>

            <ion-icon name="repeat-outline" class="play-repeat md hydrated" role="img" aria-label="repeat outline">
            </ion-icon>

        </div>
        <div class="time-range" style="display: flex;">
            <div class="remaining"></div>
            <div class="widthrange" style="width: 100%; margin: 24px 16px 0;">
                <input type="range" name="range" id="range" class="range" />
            </div>
            <div class="duration"></div>
        </div>


        <audio id="Song" src="">
        </audio>
    </div>
    <div class="music-taskbar-right" style=" margin-right: 32px;">
        <i class="fa fa-volume-up" aria-hidden="true"></i>
        <div class="widthrange" style="width: 100%;">
            <input type="range" class="range" style="margin: 0; margin-left: 16px; max-width: 100%;" />
        </div>
    </div>


</div>



<style>
    .video-frame {
        overflow: hidden;
        margin-bottom: 10px;
    }

    button {
        border: none;
        background-color: #e75252;
        color: #ffffff;
        padding: 10px 15px;
        border-radius: 3px;
        cursor: pointer;
    }

        button:focus {
            outline: 0;
        }

    #stop {
        background-color: #ff0002;
    }
</style>


@section scripts
{
    <script type="text/javascript">


        var mySong = document.getElementById("Song");
        var icon = document.querySelector(".player-inner");
        var next = document.querySelector(".play-forward");
        var back = document.querySelector(".play-back");

        var durationTime = document.querySelector(".duration");
        var remainingTime = document.querySelector(".remaining");

        var rangeBar = document.querySelector(".range");
        var nameMusic = document.querySelector(".music-title .title");
        var author = document.querySelector(".music-title .author")
        var imageMusic = document.querySelector(".music-img img");
        var spinnerImage = document.querySelector(".music-img");
        var musicTask = document.querySelector(".music-taskbar");


        var ran = document.querySelector(".play-shuffle");
        var agian = document.querySelector(".play-repeat");
        


        let music;
        $(document).ready(function () {
            load();
        });
        function load() {
            $.ajax({
                url: '/Discover/listVD',
                type: 'GET',
                success: function (data) {
                    if (data.length == 0) {
                        alert('Chưa Có Gì Trong Playlist!!')
                    }
                    else {
                        alert('Your Playlist!!')
                        music = data;
                        console.log(music);
                    }


                }
            });

        }


        setTimeout(function () {
            let Random = false;

            let isPlaying = true;
            let indexSong = 0;
            let repeat = false;
            mySong.setAttribute("src", `${music[indexSong].file}`);

            init(indexSong);

            //Time bài hát
            function displayTimer() {
                var { duration, currentTime } = mySong;
                rangeBar.max = duration;
                rangeBar.value = currentTime;
                remainingTime.textContent = time(currentTime);
                if (!duration) {
                    durationTime.textContent = "00:00";
                }
                else {
                    durationTime.textContent = time(duration);
                }
            }
            function time(number) {
                var phut = Math.floor(number / 60);
                var giay = Math.floor(number - phut * 60);
                return `${phut < 10 ? '0' + phut : phut}:${giay < 10 ? '0' + giay : giay}`;
            }
            displayTimer();
            let timer = setInterval(displayTimer, 1000);


            //Map html playlist
            const htmls = music.map((song, indexSong) => {
                return `

                                        <div class="song" data-index="${indexSong}" onclick="openList(event)">
                                            <div class="thumb" style="background-image: url('https://img.youtube.com/vi/${song.image}/maxresdefault.jpg') "></div>
                                            <div class="body">
                                                <h3 class="title"> ${song.title} </h3>
                                                <p class="author"> ${song.author} </p>
                                            </div>
                                            <form action="/Home/DetelePlaylist" method="post">
                                                <input type="text" id="domain" name="Id" value="${song.Id}" style="display:none;" />

                                                <button type="submit">
                                                    <span class="icon"><i class="fa-solid fa-calendar-circle-minus"></i></span>
                                                </button>
                                            </form>
                                        </div>


                                `}
            )
            const playlist = document.querySelector(".playlist");
            playlist.innerHTML = htmls.join('')
            playlist.addEventListener("click", scrollClick);
            function scrollClick(e) {
                const songNode = e.target.closest('.song');
                console.log(songNode);
                if (songNode || e.target.closest('.option')) {

                    indexSong = Number(songNode.getAttribute('data-index'))
                    init(indexSong)
                    quay.play()  // dùng animation quay hinh
                    mySong.play();
                    icon.innerHTML = `<ion-icon name="pause-circle"></ion-icon>`;
                    isPlaying = false;
                    timer = setInterval(displayTimer, 500);

                }
            }
            ///
            next.addEventListener("click", function () {
                changeSong(1);
            });
            back.addEventListener("click", function () {
                changeSong(-1);
            });
            function changeSong(dir) {
                if (dir === 1) {
                    indexSong++;
                    if (indexSong >= music.length) {
                        indexSong = 0;
                    }
                    isPlaying = true;
                } else if (dir === -1) {
                    indexSong--;

                    if (indexSong < 0) {
                        indexSong = music.length - 1;
                    }
                    isPlaying = true;
                }
                init(indexSong);

                playPause();
            }

            //Quay hinh
            const quay = spinnerImage.animate([
                { transform: 'rotate(360deg)' }
            ], {
                duration: 10000,
                iterations: Infinity
            })
            quay.pause()
            icon.addEventListener("click", playPause);
            function playPause() {
                if (isPlaying) {
                    quay.play()  // dùng animation quay hinh
                    mySong.play();
                    isPlaying = false;
                    icon.innerHTML = `<ion-icon name="pause-circle"></ion-icon>`;
                    timer = setInterval(displayTimer, 1000);
                }
                else {
                    quay.pause()  // dùng animation quay hinh
                    mySong.pause();
                    isPlaying = true;
                    icon.innerHTML = `<ion-icon name="play"></ion-icon>`;
                    clearInterval(timer);
                }
            }

            rangeBar.addEventListener("change", changeBar);
            function changeBar() {
                mySong.currentTime = rangeBar.value;
            }

            ////init
            function init(indexSong) {
                console.log(music[indexSong]);

                mySong.setAttribute("src", `${music[indexSong].file}`);
                imageMusic.setAttribute("src", `https://img.youtube.com/vi/${music[indexSong].image}/maxresdefault.jpg `);
                @* nameMusic.textContent = music[indexSong].title;*@
                nameMusic.innerHTML = `<marquee>${music[indexSong].title}</marquee>`;
                author.textContent = music[indexSong].author;


            }
            agian.addEventListener("click", function () {
                if (repeat == true) {
                    repeat = false;
                    agian.classList.remove("is-repeat");// dùng animation

                }
                else {

                    repeat = true;
                    agian.classList.add("is-repeat");  // dùng animation
                    ran.classList.remove("is-shuffle");// dùng animation
                    Random = false;
                }
            });
            ran.addEventListener("click", function () {
                if (Random == true) {
                    Random = false;
                    ran.classList.remove("is-shuffle");// dùng animation

                }
                else {

                    Random = true;
                    ran.classList.add("is-shuffle");  // dùng animation
                    agian.classList.remove("is-repeat");// dùng animation
                    repeat = false;
                }
            });
            //Sinh ngẫu nhiên
            function ranindex() {
                return Math.floor(Math.random() * music.length);
            }
            let indexSongBefore;
            //Chuyển bài khi kết thúc song
            mySong.addEventListener("ended", endsong)
            function endsong() {
                if (repeat == true) {
                    isPlaying = true;
                    playPause();
                }
                else {
                    if (Random == true) {
                        @*do {
                            indexSongBefore = indexSong;
                            ranindex();
                        } while (ranindex() === indexSongBefore)*@
                        init(ranindex());
                        indexSong = ranindex()
                        isPlaying = true;
                        playPause();
                    }
                    else {
                        changeSong(1);
                    }
                }
            }
        }, 1000)

        

        function openList(e) {
            var id = e.currentTarget.getAttribute('data-index')

            musicTask.classList.remove('none')

        }
    </script>

    @*    <script>
            const buyBtns = document.querySelectorAll('.js-buy-ticket')
            const modal = document.querySelector('.js-modal')
            const modalContainer = document.querySelector('.js-modal-container')
            const modalClose = document.querySelector('.modal-close')

            function showBuyTickets() {
                modal.classList.add('open')
            }

            function hideBuyTickets() {
                modal.classList.remove('open')
            }

            for (const buyBtn of buyBtns) {
                buyBtn.addEventListener('click', showBuyTickets)
            }

            modalClose.addEventListener('click', hideBuyTickets)
            modal.addEventListener('click', hideBuyTickets)
            modalContainer.addEventListener('click', function (event) {
                event.stopPropagation()
            })



        </script>*@

}




